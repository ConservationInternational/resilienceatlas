= semantic_form_for [:admin, resource], builder: ActiveAdmin::FormBuilder do |f|
  = f.semantic_errors
  = f.inputs "Layer metadata" do
    = f.input :slug
    = f.input :published
    = f.inputs "Translated fields" do
      = f.translated_inputs switch_locale: false do |ff|
        = ff.input :id, as: :hidden
        = ff.input :locale, as: :hidden
        = ff.input :name
        = ff.input :description
        = ff.input :processing
        = ff.input :data_units
        = ff.input :legend
    = f.inputs "Metadata sources" do
      = f.input :sources, as: :select, collection: Source.with_translations.all.map { |s| ["#{s.source_type} - Ref: #{s.reference_short}", s.id] }, label: "Select sources:", multiple: true
    = f.inputs "Data download" do
      = f.input :download
  = f.inputs "Configuration" do
    = f.inputs "Layer", class: "inputs select-dependency-container" do
      = f.input :layer_provider, as: :select, collection: ["cartodb", "cog", "gee", "xyz tileset", "raster"], input_html: {class: "select-dependency-controller"}, required: true
      = f.input :query, wrapper_html: {class: "select-dependency-field", data: {available_for: %w[cartodb raster]}}
      = f.input :css, wrapper_html: {class: "select-dependency-field", data: {available_for: %w[cartodb raster]}}
      = f.input :opacity, wrapper_html: {class: "select-dependency-field", data: {available_for: %w[cartodb raster]}}
      = f.input :zindex, wrapper_html: {class: "select-dependency-field", data: {available_for: %w[cartodb raster]}}
      = f.input :order, wrapper_html: {class: "select-dependency-field", data: {available_for: %w[cartodb raster]}}
      = f.input :zoom_max, wrapper_html: {class: "select-dependency-field", data: {available_for: %w[cartodb raster]}}
      = f.input :zoom_min, wrapper_html: {class: "select-dependency-field", data: {available_for: %w[cartodb raster]}}
      = f.input :layer_config, wrapper_html: {class: "select-dependency-field", data: {available_for: ["xyz tileset", "gee", "cog"], required_for: ["cog"]}}
    = f.inputs "Interactivity"
      = f.input :interaction_config, required: true
    = f.inputs "Analysis"
      = f.input :analysis_suitable, input_html: {data: {if: "checked", action: "show", target: ".analysis-query-input"}}
      = f.input :analysis_query, wrapper_html: {class: "analysis-query-input"}
      = f.input :analysis_body, wrapper_html: {class: "analysis-query-input"}
    = f.inputs "Timeline"
      = f.input :timeline, input_html: {data: {if: "checked", action: "show", target: ".timeline-query-input"}}, required: false
      = f.input :timeline_overlap, wrapper_html: {class: "timeline-query-input"}, required: true
      = f.input :timeline_steps, as: :string, input_html: { value: Array.wrap(f.object.timeline_steps).join(", ") }, wrapper_html: {class: "timeline-query-input"}, placeholder: "Optionally define individual steps manually in format YYYY-mm-dd divided by comma"
      = f.input :timeline_start_date, wrapper_html: {class: "timeline-query-input"}, required: true
      = f.input :timeline_end_date, wrapper_html: {class: "timeline-query-input"}
      = f.input :timeline_default_date, wrapper_html: {class: "timeline-query-input"}
      = f.input :timeline_period, as: :select, collection: Layer.timeline_periods.keys, required: true, wrapper_html: {class: "timeline-query-input"}
      = f.input :timeline_format, wrapper_html: {class: "timeline-query-input"}, required: true
    = f.inputs "Dashboard"
      = f.input :dashboard_order
  = f.actions do
    = f.action :submit
    = f.cancel_link
